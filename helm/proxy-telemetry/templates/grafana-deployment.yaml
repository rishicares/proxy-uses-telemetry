{{- if .Values.grafana.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: {{ .Values.global.monitoringNamespace }}
  labels:
    app: grafana
type: Opaque
stringData:
  password: {{ .Values.grafana.adminPassword | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: {{ .Values.global.monitoringNamespace }}
  labels:
    app: grafana
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    {{- range .Values.grafana.datasources }}
      - name: {{ .name }}
        type: {{ .type }}
        url: {{ .url }}
        access: {{ .access }}
        isDefault: {{ .isDefault }}
        editable: true
    {{- end }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: {{ .Values.global.monitoringNamespace }}
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.grafana.persistence.storageClassName }}
  resources:
    requests:
      storage: {{ .Values.grafana.persistence.size }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.monitoringNamespace }}
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        app.kubernetes.io/name: grafana
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: password
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel"
            - name: GF_PATHS_PROVISIONING
              value: "/etc/grafana/provisioning"
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.grafana.resources | nindent 12 }}
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards-config
          configMap:
            name: grafana-dashboard-config
        - name: dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Values.global.monitoringNamespace }}
  labels:
    app: grafana
spec:
  type: {{ .Values.grafana.service.type }}
  ports:
    - port: {{ .Values.grafana.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: grafana
{{- end }}


